{"version":3,"sources":["algorithms/utills.js","algorithms/MergeSort.js","components/RangeSlider.jsx","components/SortingVisualizer.jsx","algorithms/BubbleSort.js","algorithms/InsertionSort.js","App.js","index.js"],"names":["swap","arr","i","j","temp","mergeSort","array","tempArray","left","right","animations","mid","Math","floor","merge","arr1Idx","arr2Idx","push","RangeSlider","props","label","minValue","maxValue","value","onChangeCB","disabled","type","min","max","onChange","SortingVisualizer","useState","barsArray","setBarsArray","numOfBars","setNumOfBars","speed","setSpeed","delay","setDelay","isAnimating","setIsAnimating","isSorted","setIsSorted","barsArrayRef","useRef","shuffleArray","newArr","Array","random","resetArrayColour","useEffect","current","children","length","style","backgroundColor","doAnimations","forEach","index","elements","activity","colorSwap","setTimeout","colorActiveItems","colorSwapItems","swapOnBarsArray","colorFinalPosition","setNewHeight","newHeight","prevArray","updateArray","slice","elem","arrayBarStyle","console","log","className","onClick","arrayCopy","n","getBubbleSortAnimations","getInsertionSortAnimations","getMergeSortAnimations","ref","map","barHeight","height","width","e","target","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e5cccd3d.chunk.js","sourcesContent":["// this includes bounds - [min, max]\r\nexport const getRandomVal = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\nexport const swap = (arr, i, j) => {\r\n  let temp = arr[i];\r\n  arr[i] = arr[j];\r\n  arr[j] = temp;\r\n};\r\n","export const getMergeSortAnimations = (array) => {\r\n  const arrayCopy = array.slice(0);\r\n  const n = arrayCopy.length;\r\n  const tempArray = Array(n);\r\n  const animations = [];\r\n  mergeSort(arrayCopy, tempArray, 0, n - 1, animations);\r\n  return animations;\r\n};\r\n\r\nconst mergeSort = (array, tempArray, left, right, animations) => {\r\n  if (right <= left) return;\r\n  const mid = left + Math.floor((right - left) / 2);\r\n  mergeSort(array, tempArray, left, mid, animations); //  left part is sorted\r\n  mergeSort(array, tempArray, mid + 1, right, animations); // right part is sorted\r\n  merge(array, tempArray, left, mid, right, animations);\r\n};\r\n\r\nconst merge = (array, tempArray, left, mid, right, animations) => {\r\n  // copy array into tempArray\r\n  for (let i = left; i <= right; i++) {\r\n    tempArray[i] = array[i];\r\n  }\r\n\r\n  let arr1Idx = left; // start of first array\r\n  let arr2Idx = mid + 1; // start of second array\r\n  for (let i = left; i <= right; i++) {\r\n    if (arr1Idx > mid) {\r\n      animations.push([[arr2Idx], \"active\"]);\r\n      animations.push([[i, tempArray[arr2Idx]], \"setNewHeight\"]);\r\n\r\n      array[i] = tempArray[arr2Idx++];\r\n    } else if (arr2Idx > right) {\r\n      animations.push([[arr1Idx], \"active\"]);\r\n      animations.push([[i, tempArray[arr1Idx]], \"setNewHeight\"]);\r\n\r\n      array[i] = tempArray[arr1Idx++];\r\n    } else if (tempArray[arr2Idx] < tempArray[arr1Idx]) {\r\n      animations.push([[arr1Idx, arr2Idx], \"active\"]);\r\n      animations.push([[i, tempArray[arr2Idx]], \"setNewHeight\"]);\r\n\r\n      array[i] = tempArray[arr2Idx++];\r\n    } else {\r\n      animations.push([[arr1Idx, arr2Idx], \"active\"]);\r\n      animations.push([[i, tempArray[arr1Idx]], \"setNewHeight\"]);\r\n\r\n      array[i] = tempArray[arr1Idx++];\r\n    }\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\nconst RangeSlider = (props) => {\r\n  const { label, minValue, maxValue, value, onChangeCB, disabled } = props;\r\n  return (\r\n    <>\r\n      <p>{label}</p>\r\n      <input\r\n        type=\"range\"\r\n        disabled={disabled}\r\n        value={value}\r\n        min={minValue}\r\n        max={maxValue}\r\n        onChange={onChangeCB}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RangeSlider;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { getBubbleSortAnimations } from \"../algorithms/BubbleSort\";\r\nimport { getInsertionSortAnimations } from \"../algorithms//InsertionSort\";\r\nimport { getMergeSortAnimations } from \"../algorithms/MergeSort\";\r\nimport { getRandomVal, swap } from \"../algorithms//utills\";\r\nimport \"./SortingVisualizer.css\";\r\nimport RangeSlider from \"./RangeSlider\";\r\n\r\nconst MIN_NUM_OF_BARS = 10;\r\nconst MAX_NUM_OF_BARS = 100;\r\nconst DEFAULT_NUM_OF_BARS = 25;\r\nconst MIN_BAR_VAL = 2;\r\nconst MAX_BAR_VAL = 89;\r\nconst DEFAULT_SPEED = 2;\r\nconst MIN_SPEED = 1;\r\nconst MAX_SPEED = 3;\r\nconst DEFAULT_DELAY = 20; //in miliseconds\r\nconst ACTIVE_COLOR = \"black\";\r\nconst SWAPPED_COLOR = \"red\";\r\nconst SORTED_COLOR = \"limegreen\";\r\n\r\nconst SortingVisualizer = () => {\r\n  const [barsArray, setBarsArray] = useState([]);\r\n  const [numOfBars, setNumOfBars] = useState(DEFAULT_NUM_OF_BARS);\r\n  const [speed, setSpeed] = useState(DEFAULT_SPEED);\r\n  const [delay, setDelay] = useState(DEFAULT_DELAY);\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n  const [isSorted, setIsSorted] = useState(false);\r\n  const barsArrayRef = useRef(barsArray);\r\n\r\n  const shuffleArray = () => {\r\n    if (isAnimating) return;\r\n    const newArr = Array(numOfBars);\r\n    for (let i = 0; i < numOfBars; i++) {\r\n      newArr[i] = getRandomVal(MIN_BAR_VAL, MAX_BAR_VAL);\r\n    }\r\n    setBarsArray(newArr);\r\n    resetArrayColour();\r\n    setIsSorted(false);\r\n  };\r\n\r\n  useEffect(shuffleArray, [numOfBars]);\r\n\r\n  const resetArrayColour = () => {\r\n    const barsArray = barsArrayRef.current.children;\r\n    for (let i = 0; i < barsArray.length; i++) {\r\n      barsArray[i].style.backgroundColor = \"\";\r\n    }\r\n  };\r\n\r\n  const doBubbleSort = () => {\r\n    if (isAnimating || isSorted) return;\r\n    const animations = getBubbleSortAnimations(barsArray);\r\n    doAnimations(animations);\r\n  };\r\n\r\n  const doInsertionSort = () => {\r\n    if (isAnimating || isSorted) return;\r\n    const animations = getInsertionSortAnimations(barsArray);\r\n    doAnimations(animations);\r\n  };\r\n\r\n  const doMergeSort = () => {\r\n    if (isAnimating || isSorted) return;\r\n    const animations = getMergeSortAnimations(barsArray);\r\n    doAnimations(animations);\r\n  };\r\n\r\n  const doAnimations = (animations) => {\r\n    // leave if were already animating\r\n    if (isAnimating) return;\r\n\r\n    // start animation\r\n    setIsAnimating(true);\r\n    animations.forEach(([elements, activity, colorSwap], index) => {\r\n      setTimeout(() => {\r\n        if (activity === \"active\") {\r\n          colorActiveItems(elements);\r\n        } else if (activity === \"swap\") {\r\n          if (colorSwap) colorSwapItems(elements);\r\n          swapOnBarsArray(elements);\r\n        } else if (activity === \"final\") {\r\n          colorFinalPosition(elements);\r\n        } else if (activity === \"setNewHeight\") {\r\n          setNewHeight(elements[0], elements[1]);\r\n        }\r\n      }, index * delay);\r\n    });\r\n\r\n    // clear isAnimating state after all the animations (len of animations * delay)\r\n    setTimeout(() => {\r\n      setIsAnimating(false);\r\n      setIsSorted(true);\r\n    }, animations.length * delay);\r\n  };\r\n\r\n  const setNewHeight = (i, newHeight) => {\r\n    setBarsArray((prevArray) => {\r\n      const updateArray = prevArray.slice();\r\n      updateArray[i] = newHeight;\r\n      return updateArray;\r\n    });\r\n  };\r\n\r\n  const swapOnBarsArray = (elements) => {\r\n    setBarsArray((prevArray) => {\r\n      const [i, j] = elements;\r\n      const updateArray = prevArray.slice();\r\n      swap(updateArray, i, j);\r\n      return updateArray;\r\n    });\r\n  };\r\n\r\n  const colorActiveItems = (elements) => {\r\n    elements.forEach((elem) => {\r\n      const arrayBarStyle = barsArrayRef.current.children[elem].style;\r\n      setTimeout(() => {\r\n        arrayBarStyle.backgroundColor = ACTIVE_COLOR;\r\n      }, delay);\r\n\r\n      setTimeout(() => {\r\n        arrayBarStyle.backgroundColor = \"\";\r\n      }, delay * 2);\r\n    });\r\n  };\r\n\r\n  const colorSwapItems = (elements) => {\r\n    elements.forEach((elem) => {\r\n      const arrayBarStyle = barsArrayRef.current.children[elem].style;\r\n      arrayBarStyle.backgroundColor = SWAPPED_COLOR;\r\n      setTimeout(() => {\r\n        arrayBarStyle.backgroundColor = \"\";\r\n      }, delay);\r\n    });\r\n  };\r\n\r\n  const colorFinalPosition = (elements) => {\r\n    elements.forEach((elem) => {\r\n      const arrayBarStyle = barsArrayRef.current.children[elem].style;\r\n      setTimeout(() => {\r\n        arrayBarStyle.backgroundColor = SORTED_COLOR;\r\n      }, delay);\r\n    });\r\n  };\r\n\r\n  const barsSizeSliderChangeCallback = (e) => {\r\n    setNumOfBars(e.target.value);\r\n    shuffleArray();\r\n  };\r\n\r\n  const speedSliderChangeCallback = (e) => {\r\n    // increase speed, deccrease the delay\r\n    if (e.target.value > speed) {\r\n      setDelay(delay / 2);\r\n    } else {\r\n      // decrease speed, increase the delay\r\n      setDelay(delay * 2);\r\n    }\r\n    setSpeed(e.target.value);\r\n  };\r\n\r\n  console.log(delay);\r\n\r\n  return (\r\n    <>\r\n      <nav className=\"navbar\">\r\n        <div className=\"controls-bar\">\r\n          <li>\r\n            <button className=\"btn\" onClick={doBubbleSort}>\r\n              Bubble sort\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button className=\"btn\" onClick={doInsertionSort}>\r\n              Insertion sort\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button className=\"btn\" onClick={doMergeSort}>\r\n              Merge sort\r\n            </button>\r\n          </li>\r\n        </div>\r\n      </nav>\r\n      <section className=\"visualizer-container\">\r\n        <div className=\"array-container\" ref={barsArrayRef}>\r\n          {barsArray.map((barHeight, index) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              style={{\r\n                height: `${barHeight}vmin`,\r\n                width: `${100 / numOfBars}vw`,\r\n              }}\r\n              key={index}\r\n            >\r\n              {barHeight}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </section>\r\n      <footer className=\"footer\">\r\n        <div className=\"controls-bar\">\r\n          <li>\r\n            <button className=\"btn\" onClick={shuffleArray}>\r\n              Shuffle\r\n            </button>\r\n          </li>\r\n          <li className=\"bars-size-control\">\r\n            <RangeSlider\r\n              disabled={isAnimating}\r\n              label={`Size: ${numOfBars}`}\r\n              minValue={MIN_NUM_OF_BARS}\r\n              maxValue={MAX_NUM_OF_BARS}\r\n              value={numOfBars}\r\n              onChangeCB={barsSizeSliderChangeCallback}\r\n            ></RangeSlider>\r\n          </li>\r\n          <li className=\"bars-size-control\">\r\n            <RangeSlider\r\n              disabled={isAnimating}\r\n              label={`Speed: x${speed}`}\r\n              minValue={MIN_SPEED}\r\n              maxValue={MAX_SPEED}\r\n              value={speed}\r\n              onChangeCB={speedSliderChangeCallback}\r\n            ></RangeSlider>\r\n          </li>\r\n        </div>\r\n      </footer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SortingVisualizer;\r\n","import { swap } from \"./utills\";\r\n\r\nexport const getBubbleSortAnimations = (array) => {\r\n  const arrayCopy = array.slice(0);\r\n  const animations = [];\r\n  let n = arrayCopy.length;\r\n  for (let i = 0; i < n; i++) {\r\n    for (let j = 0; j < n - i; j++) {\r\n      //animations.push([[j], \"active\"]);\r\n      if (arrayCopy[j] > arrayCopy[j + 1]) {\r\n        animations.push([[j, j + 1], \"swap\", true]);\r\n        swap(arrayCopy, j, j + 1);\r\n      }\r\n    }\r\n    animations.push([[n - i - 1], \"final\"]);\r\n  }\r\n  return animations;\r\n};\r\n","import { swap } from \"./utills\";\r\n\r\nexport const getInsertionSortAnimations = (array) => {\r\n  const arrayCopy = [...array];\r\n  const animations = [];\r\n  let n = arrayCopy.length;\r\n  for (let i = 1; i < n; i++) {\r\n    for (let j = i - 1; j >= 0; j--) {\r\n      animations.push([[j], \"active\"]);\r\n      if (arrayCopy[j + 1] < arrayCopy[j]) {\r\n        animations.push([[j, j + 1], \"swap\", false]);\r\n        swap(arrayCopy, j, j + 1);\r\n      }\r\n    }\r\n  }\r\n  return animations;\r\n};\r\n","import \"./App.css\";\nimport SortingVisualizer from \"./components/SortingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {\" \"}\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}