{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Dedi\\\\Desktop\\\\development\\\\projects\\\\sorting-visualizer-react\\\\src\\\\components\\\\SortingVisualizer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { getBubbleSortAnimations } from \"../algorithms/BubbleSort\";\nimport { getInsertionSortAnimations } from \"../algorithms//InsertionSort\";\nimport { getMergeSortAnimations } from \"../algorithms/MergeSort\";\nimport { getRandomVal, swap } from \"../algorithms//utills\";\nimport \"./SortingVisualizer.css\";\nimport RangeSlider from \"./RangeSlider\";\nconst MIN_NUM_OF_BARS = 10;\nconst MAX_NUM_OF_BARS = 100;\nconst DEFAULT_NUM_OF_BARS = 25;\nconst MIN_BAR_VAL = 2;\nconst MAX_BAR_VAL = 89;\nconst DEFAULT_SPEED = 2;\nconst MIN_SPEED = 1;\nconst MAX_SPEED = 3;\nconst DEFAULT_DELAY = 20; //in miliseconds\n\nconst ACTIVE_COLOR = \"black\";\nconst SWAPPED_COLOR = \"red\";\nconst SORTED_COLOR = \"limegreen\";\n\nconst SortingVisualizer = () => {\n  _s();\n\n  const [barsArray, setBarsArray] = useState([]);\n  const [numOfBars, setNumOfBars] = useState(DEFAULT_NUM_OF_BARS);\n  const [speed, setSpeed] = useState(DEFAULT_SPEED);\n  const [delay, setDelay] = useState(DEFAULT_DELAY);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [isSorted, setIsSorted] = useState(false);\n  const barsArrayRef = useRef(barsArray);\n\n  const shuffleArray = () => {\n    if (isAnimating) return;\n    const newArr = Array(numOfBars);\n\n    for (let i = 0; i < numOfBars; i++) {\n      newArr[i] = getRandomVal(MIN_BAR_VAL, MAX_BAR_VAL);\n    }\n\n    setBarsArray(newArr);\n    resetArrayColour();\n    setIsSorted(false);\n  };\n\n  useEffect(shuffleArray, [numOfBars]);\n\n  const resetArrayColour = () => {\n    const barsArray = barsArrayRef.current.children;\n\n    for (let i = 0; i < barsArray.length; i++) {\n      barsArray[i].style.backgroundColor = \"\";\n    }\n  };\n\n  const doBubbleSort = () => {\n    if (isAnimating || isSorted) return;\n    const animations = getBubbleSortAnimations(barsArray);\n    doAnimations(animations);\n  };\n\n  const doInsertionSort = () => {\n    if (isAnimating || isSorted) return;\n    const animations = getInsertionSortAnimations(barsArray);\n    doAnimations(animations);\n  };\n\n  const doMergeSort = () => {\n    if (isAnimating || isSorted) return;\n    const animations = getMergeSortAnimations(barsArray);\n    doAnimations(animations);\n  };\n\n  const doAnimations = animations => {\n    // leave if were already animating\n    if (isAnimating) return; // start animation\n\n    setIsAnimating(true);\n    animations.forEach(([elements, activity, colorSwap], index) => {\n      setTimeout(() => {\n        if (activity === \"active\") {\n          colorActiveItems(elements);\n        } else if (activity === \"swap\") {\n          if (colorSwap) colorSwapItems(elements);\n          swapOnBarsArray(elements);\n        } else if (activity === \"final\") {\n          colorFinalPosition(elements);\n        } else if (activity === \"setNewHeight\") {\n          setNewHeight(elements[0], elements[1]);\n        }\n      }, index * delay);\n    }); // clear isAnimating state after all the animations (len of animations * delay)\n\n    setTimeout(() => {\n      setIsAnimating(false);\n      setIsSorted(true);\n    }, animations.length * delay);\n  };\n\n  const setNewHeight = (i, newHeight) => {\n    setBarsArray(prevArray => {\n      const updateArray = prevArray.slice();\n      updateArray[i] = newHeight;\n      return updateArray;\n    });\n  };\n\n  const swapOnBarsArray = elements => {\n    setBarsArray(prevArray => {\n      const [i, j] = elements;\n      const updateArray = prevArray.slice();\n      swap(updateArray, i, j);\n      return updateArray;\n    });\n  };\n\n  const colorActiveItems = elements => {\n    elements.forEach(elem => {\n      const arrayBarStyle = barsArrayRef.current.children[elem].style;\n      setTimeout(() => {\n        arrayBarStyle.backgroundColor = ACTIVE_COLOR;\n      }, delay);\n      setTimeout(() => {\n        arrayBarStyle.backgroundColor = \"\";\n      }, delay * 2);\n    });\n  };\n\n  const colorSwapItems = elements => {\n    elements.forEach(elem => {\n      const arrayBarStyle = barsArrayRef.current.children[elem].style;\n      arrayBarStyle.backgroundColor = SWAPPED_COLOR;\n      setTimeout(() => {\n        arrayBarStyle.backgroundColor = \"\";\n      }, delay);\n    });\n  };\n\n  const colorFinalPosition = elements => {\n    elements.forEach(elem => {\n      const arrayBarStyle = barsArrayRef.current.children[elem].style;\n      setTimeout(() => {\n        arrayBarStyle.backgroundColor = SORTED_COLOR;\n      }, delay);\n    });\n  };\n\n  const barsSizeSliderChangeCallback = e => {\n    setNumOfBars(e.target.value);\n    shuffleArray();\n  };\n\n  const speedSliderChangeCallback = e => {\n    // increase speed, deccrease the delay\n    if (e.target.value > speed) {\n      setDelay(delay / 2);\n    } else {\n      // decrease speed, increase the delay\n      setDelay(delay * 2);\n    }\n\n    setSpeed(e.target.value);\n  };\n\n  console.log(delay);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn\",\n            onClick: doBubbleSort,\n            children: \"Bubble sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn\",\n            onClick: doInsertionSort,\n            children: \"Insertion sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn\",\n            onClick: doMergeSort,\n            children: \"Merge sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"visualizer-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-container\",\n        ref: barsArrayRef,\n        children: barsArray.map((barHeight, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"array-bar\",\n          style: {\n            height: `${barHeight}vmin`,\n            width: `${100 / numOfBars}vw`\n          },\n          children: barHeight\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"footer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn\",\n            onClick: shuffleArray,\n            children: \"Shuffle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"bars-size-control\",\n          children: /*#__PURE__*/_jsxDEV(RangeSlider, {\n            disabled: isAnimating,\n            label: `Size: ${numOfBars}`,\n            minValue: MIN_NUM_OF_BARS,\n            maxValue: MAX_NUM_OF_BARS,\n            value: numOfBars,\n            onChangeCB: barsSizeSliderChangeCallback\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"bars-size-control\",\n          children: /*#__PURE__*/_jsxDEV(RangeSlider, {\n            disabled: isAnimating,\n            label: `Speed: x${speed}`,\n            minValue: MIN_SPEED,\n            maxValue: MAX_SPEED,\n            value: speed,\n            onChangeCB: speedSliderChangeCallback\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SortingVisualizer, \"ASx8xbATS/JupicZ2zWzQthsJvo=\");\n\n_c = SortingVisualizer;\nexport default SortingVisualizer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SortingVisualizer\");","map":{"version":3,"sources":["C:/Users/Dedi/Desktop/development/projects/sorting-visualizer-react/src/components/SortingVisualizer.jsx"],"names":["React","useState","useEffect","useRef","getBubbleSortAnimations","getInsertionSortAnimations","getMergeSortAnimations","getRandomVal","swap","RangeSlider","MIN_NUM_OF_BARS","MAX_NUM_OF_BARS","DEFAULT_NUM_OF_BARS","MIN_BAR_VAL","MAX_BAR_VAL","DEFAULT_SPEED","MIN_SPEED","MAX_SPEED","DEFAULT_DELAY","ACTIVE_COLOR","SWAPPED_COLOR","SORTED_COLOR","SortingVisualizer","barsArray","setBarsArray","numOfBars","setNumOfBars","speed","setSpeed","delay","setDelay","isAnimating","setIsAnimating","isSorted","setIsSorted","barsArrayRef","shuffleArray","newArr","Array","i","resetArrayColour","current","children","length","style","backgroundColor","doBubbleSort","animations","doAnimations","doInsertionSort","doMergeSort","forEach","elements","activity","colorSwap","index","setTimeout","colorActiveItems","colorSwapItems","swapOnBarsArray","colorFinalPosition","setNewHeight","newHeight","prevArray","updateArray","slice","j","elem","arrayBarStyle","barsSizeSliderChangeCallback","e","target","value","speedSliderChangeCallback","console","log","map","barHeight","height","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { getBubbleSortAnimations } from \"../algorithms/BubbleSort\";\r\nimport { getInsertionSortAnimations } from \"../algorithms//InsertionSort\";\r\nimport { getMergeSortAnimations } from \"../algorithms/MergeSort\";\r\nimport { getRandomVal, swap } from \"../algorithms//utills\";\r\nimport \"./SortingVisualizer.css\";\r\nimport RangeSlider from \"./RangeSlider\";\r\n\r\nconst MIN_NUM_OF_BARS = 10;\r\nconst MAX_NUM_OF_BARS = 100;\r\nconst DEFAULT_NUM_OF_BARS = 25;\r\nconst MIN_BAR_VAL = 2;\r\nconst MAX_BAR_VAL = 89;\r\nconst DEFAULT_SPEED = 2;\r\nconst MIN_SPEED = 1;\r\nconst MAX_SPEED = 3;\r\nconst DEFAULT_DELAY = 20; //in miliseconds\r\nconst ACTIVE_COLOR = \"black\";\r\nconst SWAPPED_COLOR = \"red\";\r\nconst SORTED_COLOR = \"limegreen\";\r\n\r\nconst SortingVisualizer = () => {\r\n  const [barsArray, setBarsArray] = useState([]);\r\n  const [numOfBars, setNumOfBars] = useState(DEFAULT_NUM_OF_BARS);\r\n  const [speed, setSpeed] = useState(DEFAULT_SPEED);\r\n  const [delay, setDelay] = useState(DEFAULT_DELAY);\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n  const [isSorted, setIsSorted] = useState(false);\r\n  const barsArrayRef = useRef(barsArray);\r\n\r\n  const shuffleArray = () => {\r\n    if (isAnimating) return;\r\n    const newArr = Array(numOfBars);\r\n    for (let i = 0; i < numOfBars; i++) {\r\n      newArr[i] = getRandomVal(MIN_BAR_VAL, MAX_BAR_VAL);\r\n    }\r\n    setBarsArray(newArr);\r\n    resetArrayColour();\r\n    setIsSorted(false);\r\n  };\r\n\r\n  useEffect(shuffleArray, [numOfBars]);\r\n\r\n  const resetArrayColour = () => {\r\n    const barsArray = barsArrayRef.current.children;\r\n    for (let i = 0; i < barsArray.length; i++) {\r\n      barsArray[i].style.backgroundColor = \"\";\r\n    }\r\n  };\r\n\r\n  const doBubbleSort = () => {\r\n    if (isAnimating || isSorted) return;\r\n    const animations = getBubbleSortAnimations(barsArray);\r\n    doAnimations(animations);\r\n  };\r\n\r\n  const doInsertionSort = () => {\r\n    if (isAnimating || isSorted) return;\r\n    const animations = getInsertionSortAnimations(barsArray);\r\n    doAnimations(animations);\r\n  };\r\n\r\n  const doMergeSort = () => {\r\n    if (isAnimating || isSorted) return;\r\n    const animations = getMergeSortAnimations(barsArray);\r\n    doAnimations(animations);\r\n  };\r\n\r\n  const doAnimations = (animations) => {\r\n    // leave if were already animating\r\n    if (isAnimating) return;\r\n\r\n    // start animation\r\n    setIsAnimating(true);\r\n    animations.forEach(([elements, activity, colorSwap], index) => {\r\n      setTimeout(() => {\r\n        if (activity === \"active\") {\r\n          colorActiveItems(elements);\r\n        } else if (activity === \"swap\") {\r\n          if (colorSwap) colorSwapItems(elements);\r\n          swapOnBarsArray(elements);\r\n        } else if (activity === \"final\") {\r\n          colorFinalPosition(elements);\r\n        } else if (activity === \"setNewHeight\") {\r\n          setNewHeight(elements[0], elements[1]);\r\n        }\r\n      }, index * delay);\r\n    });\r\n\r\n    // clear isAnimating state after all the animations (len of animations * delay)\r\n    setTimeout(() => {\r\n      setIsAnimating(false);\r\n      setIsSorted(true);\r\n    }, animations.length * delay);\r\n  };\r\n\r\n  const setNewHeight = (i, newHeight) => {\r\n    setBarsArray((prevArray) => {\r\n      const updateArray = prevArray.slice();\r\n      updateArray[i] = newHeight;\r\n      return updateArray;\r\n    });\r\n  };\r\n\r\n  const swapOnBarsArray = (elements) => {\r\n    setBarsArray((prevArray) => {\r\n      const [i, j] = elements;\r\n      const updateArray = prevArray.slice();\r\n      swap(updateArray, i, j);\r\n      return updateArray;\r\n    });\r\n  };\r\n\r\n  const colorActiveItems = (elements) => {\r\n    elements.forEach((elem) => {\r\n      const arrayBarStyle = barsArrayRef.current.children[elem].style;\r\n      setTimeout(() => {\r\n        arrayBarStyle.backgroundColor = ACTIVE_COLOR;\r\n      }, delay);\r\n\r\n      setTimeout(() => {\r\n        arrayBarStyle.backgroundColor = \"\";\r\n      }, delay * 2);\r\n    });\r\n  };\r\n\r\n  const colorSwapItems = (elements) => {\r\n    elements.forEach((elem) => {\r\n      const arrayBarStyle = barsArrayRef.current.children[elem].style;\r\n      arrayBarStyle.backgroundColor = SWAPPED_COLOR;\r\n      setTimeout(() => {\r\n        arrayBarStyle.backgroundColor = \"\";\r\n      }, delay);\r\n    });\r\n  };\r\n\r\n  const colorFinalPosition = (elements) => {\r\n    elements.forEach((elem) => {\r\n      const arrayBarStyle = barsArrayRef.current.children[elem].style;\r\n      setTimeout(() => {\r\n        arrayBarStyle.backgroundColor = SORTED_COLOR;\r\n      }, delay);\r\n    });\r\n  };\r\n\r\n  const barsSizeSliderChangeCallback = (e) => {\r\n    setNumOfBars(e.target.value);\r\n    shuffleArray();\r\n  };\r\n\r\n  const speedSliderChangeCallback = (e) => {\r\n    // increase speed, deccrease the delay\r\n    if (e.target.value > speed) {\r\n      setDelay(delay / 2);\r\n    } else {\r\n      // decrease speed, increase the delay\r\n      setDelay(delay * 2);\r\n    }\r\n    setSpeed(e.target.value);\r\n  };\r\n\r\n  console.log(delay);\r\n\r\n  return (\r\n    <>\r\n      <nav className=\"navbar\">\r\n        <div className=\"controls-bar\">\r\n          <li>\r\n            <button className=\"btn\" onClick={doBubbleSort}>\r\n              Bubble sort\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button className=\"btn\" onClick={doInsertionSort}>\r\n              Insertion sort\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button className=\"btn\" onClick={doMergeSort}>\r\n              Merge sort\r\n            </button>\r\n          </li>\r\n        </div>\r\n      </nav>\r\n      <section className=\"visualizer-container\">\r\n        <div className=\"array-container\" ref={barsArrayRef}>\r\n          {barsArray.map((barHeight, index) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              style={{\r\n                height: `${barHeight}vmin`,\r\n                width: `${100 / numOfBars}vw`,\r\n              }}\r\n              key={index}\r\n            >\r\n              {barHeight}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </section>\r\n      <footer className=\"footer\">\r\n        <div className=\"controls-bar\">\r\n          <li>\r\n            <button className=\"btn\" onClick={shuffleArray}>\r\n              Shuffle\r\n            </button>\r\n          </li>\r\n          <li className=\"bars-size-control\">\r\n            <RangeSlider\r\n              disabled={isAnimating}\r\n              label={`Size: ${numOfBars}`}\r\n              minValue={MIN_NUM_OF_BARS}\r\n              maxValue={MAX_NUM_OF_BARS}\r\n              value={numOfBars}\r\n              onChangeCB={barsSizeSliderChangeCallback}\r\n            ></RangeSlider>\r\n          </li>\r\n          <li className=\"bars-size-control\">\r\n            <RangeSlider\r\n              disabled={isAnimating}\r\n              label={`Speed: x${speed}`}\r\n              minValue={MIN_SPEED}\r\n              maxValue={MAX_SPEED}\r\n              value={speed}\r\n              onChangeCB={speedSliderChangeCallback}\r\n            ></RangeSlider>\r\n          </li>\r\n        </div>\r\n      </footer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SortingVisualizer;\r\n"]},"metadata":{},"sourceType":"module"}