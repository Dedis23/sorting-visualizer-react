{"ast":null,"code":"export const getMergeSortAnimations = array => {\n  const arrayCopy = array.slice(0);\n  const n = arrayCopy.length;\n  const tempArray = Array(n);\n  const animations = [];\n  mergeSort(arrayCopy, tempArray, 0, n - 1, animations);\n  return animations;\n};\n\nconst mergeSort = (array, tempArray, left, right, animations) => {\n  if (right <= left) return;\n  const mid = left + Math.floor((right - left) / 2);\n  mergeSort(array, tempArray, left, mid, animations); //  left part is sorted\n\n  mergeSort(array, tempArray, mid + 1, right, animations); // right part is sorted\n\n  merge(array, tempArray, left, mid, right, animations);\n};\n\nconst merge = (array, tempArray, left, mid, right, animations) => {\n  // copy array into tempArray\n  for (let i = left; i <= right; i++) {\n    tempArray[i] = array[i];\n  }\n\n  let arr1Idx = left; // start of first array\n\n  let arr2Idx = mid + 1; // start of second array\n\n  for (let i = left; i <= right; i++) {\n    if (arr1Idx > mid) {\n      animations.push([[arr2Idx], \"active\"]);\n      animations.push([[i, tempArray[arr2Idx]], \"setNewHeight\"]);\n      array[i] = tempArray[arr2Idx++];\n    } else if (arr2Idx > right) {\n      animations.push([[arr1Idx], \"active\"]);\n      animations.push([[i, tempArray[arr1Idx]], \"setNewHeight\"]);\n      array[i] = tempArray[arr1Idx++];\n    } else if (tempArray[arr2Idx] < tempArray[arr1Idx]) {\n      animations.push([[arr1Idx, arr2Idx], \"active\"]);\n      animations.push([[i, tempArray[arr2Idx]], \"setNewHeight\"]);\n      array[i] = tempArray[arr2Idx++];\n    } else {\n      animations.push([[arr1Idx, arr2Idx], \"active\"]);\n      animations.push([[i, tempArray[arr1Idx]], \"setNewHeight\"]);\n      array[i] = tempArray[arr1Idx++];\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Dedi/Desktop/development/projects/sorting-visualizer-react/src/algorithms/MergeSort.js"],"names":["getMergeSortAnimations","array","arrayCopy","slice","n","length","tempArray","Array","animations","mergeSort","left","right","mid","Math","floor","merge","i","arr1Idx","arr2Idx","push"],"mappings":"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","sourcesContent":["export const getMergeSortAnimations = (array) => {\r\n  const arrayCopy = array.slice(0);\r\n  const n = arrayCopy.length;\r\n  const tempArray = Array(n);\r\n  const animations = [];\r\n  mergeSort(arrayCopy, tempArray, 0, n - 1, animations);\r\n  return animations;\r\n};\r\n\r\nconst mergeSort = (array, tempArray, left, right, animations) => {\r\n  if (right <= left) return;\r\n  const mid = left + Math.floor((right - left) / 2);\r\n  mergeSort(array, tempArray, left, mid, animations); //  left part is sorted\r\n  mergeSort(array, tempArray, mid + 1, right, animations); // right part is sorted\r\n  merge(array, tempArray, left, mid, right, animations);\r\n};\r\n\r\nconst merge = (array, tempArray, left, mid, right, animations) => {\r\n  // copy array into tempArray\r\n  for (let i = left; i <= right; i++) {\r\n    tempArray[i] = array[i];\r\n  }\r\n\r\n  let arr1Idx = left; // start of first array\r\n  let arr2Idx = mid + 1; // start of second array\r\n  for (let i = left; i <= right; i++) {\r\n    if (arr1Idx > mid) {\r\n      animations.push([[arr2Idx], \"active\"]);\r\n      animations.push([[i, tempArray[arr2Idx]], \"setNewHeight\"]);\r\n\r\n      array[i] = tempArray[arr2Idx++];\r\n    } else if (arr2Idx > right) {\r\n      animations.push([[arr1Idx], \"active\"]);\r\n      animations.push([[i, tempArray[arr1Idx]], \"setNewHeight\"]);\r\n\r\n      array[i] = tempArray[arr1Idx++];\r\n    } else if (tempArray[arr2Idx] < tempArray[arr1Idx]) {\r\n      animations.push([[arr1Idx, arr2Idx], \"active\"]);\r\n      animations.push([[i, tempArray[arr2Idx]], \"setNewHeight\"]);\r\n\r\n      array[i] = tempArray[arr2Idx++];\r\n    } else {\r\n      animations.push([[arr1Idx, arr2Idx], \"active\"]);\r\n      animations.push([[i, tempArray[arr1Idx]], \"setNewHeight\"]);\r\n\r\n      array[i] = tempArray[arr1Idx++];\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}